//十位以上计算未达成
//出结果的时候没有严格按照标准进行计算
//还是计算出十位的问题
#include"head.h"
int kuohao(char s[1000]);
int fuhao(char s[1000]);
char *shuru();
stack midtolast(char s[1000]);
int value(char c);
int b;
float calculate(stack x);
stack reverse(stack x);
int main()
{
	int a = 0, c = 5;
	char s[1000]; 
	while (a != 0 || c != 0)
	{
		if (a != 0)
		{
			cout << "括号不匹配，请重新输入" << endl;
		}
		if (c == 1)
		{
			cout << "运算符号输入错误，请重新输入" << endl;
		}
		strcpy_s(s, shuru());
		a = kuohao(s);
		c = fuhao(s);
	}
	stack x=midtolast(s);
	float i = calculate(x);
	cout << i;
}



int kuohao(char s[1000])
{
	int a = 0;
	for (int x = 0; x < b; x++)
	{
		if (s[x] == '(')
			a++;
		else if (s[x] == ')')
			a--;
	}
	return a;
}




int fuhao(char s[1000])
{
	if (s[0] == '+' || s[0] == '-' || s[0] == '/' || s[0] == '*')
		return 1;
	if (s[b - 1] == '+' || s[b - 1] == '-' || s[b - 1] == '/' || s[b - 1] == '*')
		return 1;
	for (int a = 0; a < b; a++)
	{
		if (s[a] == '+' || s[a] == '-' || s[a] == '*' || s[a] == '/')
		{
			if (s[a + 1] == '(')
				a++;
			if (s[a + 1] == '+' || s[a + 1] == '-' || s[a + 1] == '*' || s[a + 1] == '/')
				return 1;
		}
	}
	return 0;
}
char *shuru()
{
	char s[1000], x;
	int i = 0;
	cout << "请输入表达式";
	while ((x = getchar()) != '\n')
	{
		s[i] = x;
		i++;
	}
	b = i;
	return s;
}

stack midtolast(char s[1000])
{
	stack x;//符号栈
	stack y;//数字栈
	x.newstack('q');
	y.newstack('q');
	for (int a = 0; a < b; a++)
	{
		if (s[a] >= '0'&&s[a] <= '9')
		{
			y.push(s[a]);
		}
		else if (s[a] == '(')
		{
			x.push(s[a]);
		}
		else if (s[a] == ')')
		{
			while ((x.topp()) != '(')
			{
				y.push(x.pop());
			}
			char c = x.pop();
		}
		else if (value(s[a]) > value(x.topp()))
		{
			x.push(s[a]);
		}
		else if (value(s[a]) <= value(x.topp()))
		{
			while (value(s[a]) <= value(x.topp()))
			{
				y.push(x.pop());
			}
			x.push(s[a]);
		}
	}
	while (x.topp()!='q')
	{
		y.push(x.pop());
	}
	return y; 
}

int value(char c)
{
	if (c == '(')
		return 0;
	if (c == '+' || c == '-')
		return 1;
	if (c == '*' || c == '/')
		return 2;
	return -1;
}
stack reverse(stack x)
{
	stack s;
	s.newstack('q');
	while (x.topp() != 'q')
	{
		s.push(x.pop());
	}
	return s;
}
float calculate(stack s)
{
	stack x = reverse(s);
	float a[1000] = { 0 };//数字
	int i = -1;
	while (x.topp() != 'q')
	{
		if ((x.topp()) >= '0' && (x.topp()) <= '9')
		{
			i++;
			a[i] = float(x.pop() - 48);
			
		}
		if (x.topp() == '+' )
		{
			int b = i-1;
			char c = x.pop();
			a[b] = a[i] + a[b];
			i--;
		}
		if (x.topp() == '-')
		{
			int b = i - 1;
			char c = x.pop();
			a[b] = a[i] - a[b];
			i--;
		}
		if (x.topp() == '*')
		{
			int b = i - 1;
			char c = x.pop();
			a[b] = a[i] * a[b];
			i--;
		}
		if (x.topp() == '/')
		{
			int b = i - 1;
			char c = x.pop();
			a[b] = a[i] / a[b];
			i--;
		}
	}
	return a[0];
}




#pragma once
#include<stdio.h>
#include<iostream>
using namespace std;
class node {
public:
	char s;
	node *next;
	node(char c) { s = c; };
};
class stack {
public:
	float i = 0;
	node *top;
	void newstack(char c);
	void push(char c);
	char topp();
	char pop();
};
void stack::newstack(char c)
{
	node *x = new(node)(c);
	top= x;
}
void stack::push(char c)
{
	node *y = new(node)(c);
	y->next = top;
	top = y;
}
char stack::topp()
{
	char c;
	c = top->s;
	return c;
}
char stack::pop()
{
	char c;
	c = top->s;
	top = top->next;
	return c;
}